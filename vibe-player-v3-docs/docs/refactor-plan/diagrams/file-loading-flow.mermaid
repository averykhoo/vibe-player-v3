%% vibe-player-v3/docs/refactor-plan/diagrams/file-loading-flow.mermaid
%% Detailed flow for loading a new audio file and initiating parallel analysis.

sequenceDiagram
    actor User
    participant UI
    participant Orchestrator as AudioOrchestratorService
    participant Engine as IAudioEnginePort
    participant WaveformService as IWaveformPort
    participant SpectrogramService as ISpectrogramPort
    participant AnalysisService as IAnalysisPort
    participant DtmfService as IDtmfPort
    participant Store as Svelte Stores
    
    User->>UI: Selects local audio file
    UI->>Orchestrator: COMMAND_LOAD_AUDIO(file)

    activate Orchestrator
    Orchestrator->>Store: playerStore.update({ status: 'loading' })
    Orchestrator->>Engine: decodeAudio(file)
    deactivate Orchestrator

    activate Engine
    Note over Engine: Decodes file into an AudioBuffer
    Engine-->>Orchestrator: EVENT_LOAD_SUCCESS(audioBuffer, duration)
    deactivate Engine

    activate Orchestrator
    Orchestrator->>Store: playerStore.update({ status: 'ready', duration, isPlayable: true })
    
    par
        Orchestrator->>WaveformService: generatePeakData(audioBuffer)
        and
        Orchestrator->>SpectrogramService: generateFFTData(audioBuffer)
        and
        Orchestrator->>AnalysisService: startAnalysis(audioBuffer)
        and
        Orchestrator->>DtmfService: startToneAnalysis(audioBuffer)
    end
    deactivate Orchestrator

    activate WaveformService
    Note over WaveformService: Computes peak data for visualization
    WaveformService-->>Store: waveformStore.update({ hasData: true })
    deactivate WaveformService
    
    activate SpectrogramService
    Note over SpectrogramService: Posts data to Spectrogram worker
    SpectrogramService-->>Store: spectrogramStore.update({ hasData: true })
    deactivate SpectrogramService

    activate AnalysisService
    Note over AnalysisService: Posts data to VAD worker
    AnalysisService-->>Store: analysisStore.update({ vadRegions: [...] })
    deactivate AnalysisService

    activate DtmfService
    Note over DtmfService: Posts data to DTMF worker
    DtmfService-->>Store: dtmfStore.update({ dtmfResults: [...] })
    deactivate DtmfService